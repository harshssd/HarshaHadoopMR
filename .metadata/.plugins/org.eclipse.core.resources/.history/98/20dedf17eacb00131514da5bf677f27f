package sample;

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable>{

	private final static IntWritable one = new IntWritable(1);
	private Text word = new Text();

	public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
		StringTokenizer itr = new StringTokenizer(value.toString());
		
		String[] token;
		//General WordCount
		while (itr.hasMoreTokens()) {
			token = itr.nextToken().split("\\s(.!?:;\"()<>[]$=-)");
			//word.set(itr.nextToken());
			word.set(token[0]);
			context.write(word, one);
		}
		/*
		//#TagCounts
		String nextWord;
		while (itr.hasMoreTokens()) {
			nextWord = itr.nextToken();
			if(nextWord.matches("#[\\S]+")){
				word.set(nextWord);
				context.write(word, one);
			}
		}
		
		//@TagCounts
		while (itr.hasMoreTokens()) {
			nextWord = itr.nextToken();
			if(nextWord.matches("@[\\S]+")){
				word.set(nextWord);
				context.write(word, one);
			}
		}	
		*/
	}
}
package sample;

import java.io.IOException;

import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class ShortestPathMapper extends Mapper<LongWritable, Text, LongWritable, Text> {  
	  
    public void map(LongWritable key, Text value, Context context)  
            throws IOException, InterruptedException {  

    	Text word = new Text();  
        String line = value.toString();//1 0 2:3:  
        String[] sp = line.split(" ");//input[0] = 1, input[0] = 0, input[0] = 2:3:   
        int distanceAdded = Integer.parseInt(sp[1]) + 1;  
        String[] pointsTo = sp[2].split(":");  
        for (String distance : pointsTo) {  
            word.set("VALUE " + distanceAdded);//tells me to look at distance value  
            context.write(new LongWritable(Integer.parseInt(distance)), word);  
            word.clear();  
        }  
        //pass in current node's distance (if it is the lowest distance)  
        word.set("VALUE " + sp[1]);  
        context.write(new LongWritable(Integer.parseInt(sp[0])), word);  
        word.clear();  

        word.set("NODES " + sp[2]);//tells me to append on the final tally  
        context.write(new LongWritable(Integer.parseInt(sp[0])), word);  
        word.clear();  

    }  
}  

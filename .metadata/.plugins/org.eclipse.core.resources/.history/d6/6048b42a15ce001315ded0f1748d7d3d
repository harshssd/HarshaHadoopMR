package sample;

import java.io.IOException;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

public class ShortestPathMapper extends Mapper<LongWritable, Text, LongWritable, Text>{
	
	Text word = new Text();
	
	public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
		
		//String line = value.toString();
		String[] input = value.toString().split(" "); //1 0 2:3:
		String[] points = input[2].split(":"); //Split 2:3: to get the neighbor points
		int distance = Integer.parseInt(points[1]) + 1; //points1 contains the distance of present point,
														//add 1 to it.
		for(int i=0; i<points.length; ++i){
			word.set("AdjacentNodeDistance "+distance);
			context.write(new LongWritable(Integer.parseInt(points[i])), word);
			word.clear();
		}
		
		//Write the distance of the current node if its the min
		word.set("CurrentNodeValue "+input[1]);
		//emitting the key as current node and its cost as value
		context.write(new LongWritable(Integer.parseInt(input[0])), word);
		word.clear();
		
		//write the final output
		word.set("AdjacentNodes" + input[2]);
		//emitting the key as current node and its neighbors as values
		context.write(new LongWritable(Integer.parseInt(input[0])), word);
		word.clear();
	}
	
}